{"version":3,"sources":["components/Header.js","components/Button.js","views/ErrorView.js","views/ChooseFileView.js","components/Spinner.js","views/LoadPDFView.js","components/DrawableCanvas.js","views/ChooseZoneView.js","components/ArrangePDFController.js","views/ArrangePDFView.js","views/DownloadView.js","Views.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","defaultProps","Button","props","type","onClick","text","ErrorView","error","nextView","ChooseFileView","errorHandler","input","document","createElement","accept","onchange","e","file","target","files","remove","reader","FileReader","readAsDataURL","onload","result","onerror","click","LoadPDFView","a","loadingTask","pdfjs","getDocument","promise","loadFile","DrawableCanvas","pdf","sendCoords","useState","rendered","setRendered","canvas","useRef","renderedPage","renderedContext","startX","startY","coordinates","setCoordinates","mouseIsDown","useEffect","getPage","then","page","scale","view","viewport","getViewport","context","current","getContext","height","width","fillStyle","renderContext","canvasContext","render","ref","id","onMouseDown","clientX","clientY","rect","getBoundingClientRect","coords","left","top","onMouseUp","onMouseMove","nativeEvent","beginPath","fillRect","x","y","ChooseZoneView","endX","endY","setCoords","ArrangePDFController","pdfBase64","fullCanvas","sectionCanvas","convertToBase64","img","Math","abs","putImageData","toDataURL","findExtraPages","pagesToKeep","currentSection","PDFDocument","load","originalDoc","i","numPages","sectionImage","getImageData","base64Image","push","create","newDoc","copyPages","forEach","addPage","save","bytes","URL","createObjectURL","Blob","buffer","ArrangePDFView","DownloadView","blob","homeView","src","href","download","Views","currentView","setCurrentView","errorMsg","setErrorMsg","receivedFileBase64","setReceivedFileBase64","receivedFile","setReceivedFile","completedFile","setCompletedFile","message","views","key","GlobalWorkerOptions","workerSrc","version","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"4WAGMA,G,YAAS,kBACb,6BACE,wBAAIC,UAAU,aAAd,gBAKJD,EAAOE,aAAe,GAEPF,Q,QCRTG,G,MAAS,SAAAC,GACb,OACE,yBAAKH,UAAS,wBAAmBG,EAAMC,MAAQC,QAASF,EAAME,SAC3DF,EAAMG,QAWbJ,EAAOD,aAAe,CACpBG,KAAM,WAGOF,QCVTK,G,MAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC1B,OACE,yBAAKT,UAAU,iBACb,uBAAGA,UAAU,aAAaQ,EAA1B,8BACA,kBAAC,EAAD,CAAQF,KAAK,YAAYD,QAASI,OAUxCF,EAAUN,aAAe,GAEVM,QCZTG,EAAiB,SAAC,GAAgC,IAA9BD,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,aAwBlC,OACE,6BACE,6CACA,uBAAGX,UAAU,oBACX,uCADF,6KAKA,iDACA,uBAAGA,UAAU,oBAAb,kNAGyD,wCAEzD,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,aAAb,WACA,kBAAC,EAAD,CAAQM,KAAK,cAAcF,KAAK,UAAUC,QAnC7B,WACjB,IAAIO,EAAQC,SAASC,cAAc,SACnCF,EAAMR,KAAO,OACbQ,EAAMG,OAAS,kBAEfH,EAAMI,SAAW,SAAAC,GACf,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GAC5BR,EAAMS,SAGN,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAMhB,EAASa,EAAOI,SACtCJ,EAAOK,QAAU,kBAAMhB,EAAa,oDAGtCC,EAAMgB,cA8BVlB,EAAeT,aAAe,GAEfS,Q,0CChEA,G,OAAA,WACb,OACE,yBAAKV,UAAU,aCMb6B,EAAc,SAAC,GAAsC,IAApCX,EAAmC,EAAnCA,KAAMT,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,aAiBrC,OAXc,uCAAG,WAAMO,GAAN,eAAAY,EAAA,6DACTC,EAAcC,IAAMC,YAAYf,GADvB,cAIbT,EAJa,SAIEsB,EAAYG,QAJd,kFAMbvB,EAAa,4DANA,yDAAH,qDAUdwB,CAASjB,GAEP,yBAAKlB,UAAU,iBACb,kBAAC,EAAD,MACA,uBAAGA,UAAU,aAAb,sBAWN6B,EAAY5B,aAAe,GAEZ4B,QC9BTO,G,OAAiB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,WAAiB,EAGdC,oBAAS,GAHK,mBAGvCC,EAHuC,KAG7BC,EAH6B,KAMxCC,EAASC,iBAAO,MAChBC,EAAeD,iBAAO,MACtBE,EAAkBF,iBAAO,MARe,EAWRJ,mBAAS,CAC7CO,QAAS,EACTC,QAAS,IAbmC,mBAWvCC,EAXuC,KAW1BC,EAX0B,KAiBxCC,EAAcP,kBAAO,GAQ3BQ,qBAAU,WAEHX,GAEHH,EAAIe,QAAQ,GAAGC,MAAK,SAAAC,GAGlB,IAAMC,EAAQ,IAAMD,EAAKE,KAAK,GACxBC,EAAWH,EAAKI,YAAY,CAAEH,UAE9BI,EAAUjB,EAAOkB,QAAQC,WAAW,MAC1CnB,EAAOkB,QAAQE,OAASL,EAASK,OACjCpB,EAAOkB,QAAQG,MAAQN,EAASM,MAChCJ,EAAQK,UAAY,oBAEpB,IAAMC,EAAgB,CACpBC,cAAeP,EACfF,YAEFH,EAAKa,OAAOF,GAGZrB,EAAagB,QAAUN,EACvBT,EAAgBe,QAAUK,EAC1BxB,GAAY,SAgFlB,OACE,4BACE2B,IAAK1B,EACL2B,GAAG,kBACHC,YAjEoB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAVlC5B,EAAagB,QAAQO,OAAOtB,EAAgBe,SAe5C,IAAMa,EAAO/B,EAAOkB,QAAQc,wBAG5BxB,EAAYU,SAAU,EACtBX,GAAe,SAAA0B,GAAM,MAAK,CACxB7B,OAAQyB,EAAUE,EAAKG,KACvB7B,OAAQyB,EAAUC,EAAKI,SAuDvBC,UA5CkB,SAAC,GAA0B,IAAxBP,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAEhCtB,EAAYU,SAAU,EAGtB,IAAMa,EAAO/B,EAAOkB,QAAQc,wBAG5BpC,EACEU,EAAYF,OACZE,EAAYD,OACZwB,EAAUE,EAAKG,KACfJ,EAAUC,EAAKI,MAiCfE,YAtBmB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACxB,GAAsB,MAAlBtC,EAAOkB,SAAmBV,EAAYU,QAAS,CACjD,IAAMa,EAAO/B,EAAOkB,QAAQc,wBACtBf,EAAUjB,EAAOkB,QAAQC,WAAW,MAG1CF,EAAQsB,YACRtB,EAAQuB,SACNlC,EAAYF,OACZE,EAAYD,OACZiC,EAAYG,EAAIV,EAAKG,KAAO5B,EAAYF,OACxCkC,EAAYI,EAAIX,EAAKI,IAAM7B,EAAYD,cAqB/CX,EAAenC,aAAe,GAEfmC,QCnJTiD,EAAiB,SAAC,GAAuB,IAArBhD,EAAoB,EAApBA,IAAK5B,EAAe,EAAfA,SAAe,EAChB8B,mBAAS,CACnCO,QAAS,EACTC,QAAS,EACTuC,MAAO,EACPC,MAAO,IALmC,mBACrCZ,EADqC,KAC7Ba,EAD6B,KAmC5C,OACE,yBAAKxF,UAAU,iBACb,uBAAGA,UAAU,aAAb,iIACA,kBAAC,EAAD,CAAgBqC,IAAKA,EAAKC,WArBR,SAACQ,EAAQC,EAAQuC,EAAMC,GAC3CC,EAAU,CACR1C,SACAC,SACAuC,OACAC,YAiBA,kBAAC,EAAD,CACEnF,MAAyB,IAAnBuE,EAAO7B,OAAgB,cAAgB,UAC7CxC,KAAK,UACLD,QAba,YACM,IAAnBsE,EAAO7B,QACTrC,EAASkE,EAAO7B,OAAQ6B,EAAO5B,OAAQ4B,EAAOW,KAAMX,EAAOY,WAsBjEF,EAAepF,aAAe,GAEfoF,Q,QC9BTI,G,OAAuB,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,UAAWrD,EAA8D,EAA9DA,IAAK5B,EAAyD,EAAzDA,SAAUE,EAA+C,EAA/CA,aAAcmC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,OAAQuC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAAW,EAEvEhD,oBAAS,GAF8D,mBAEhGC,EAFgG,KAEtFC,EAFsF,KAIjGkD,EAAahD,iBAAO,MACpBiD,EAAgBjD,iBAAO,MAEvBkD,EAAkB,SAACC,EAAK/B,EAAOD,GACnC,IAAMH,EAAUiC,EAAchC,QAAQC,WAAW,MAIjD,OAHA+B,EAAchC,QAAQG,MAAQgC,KAAKC,IAAIjC,GACvC6B,EAAchC,QAAQE,OAASiC,KAAKC,IAAIlC,GACxCH,EAAQsC,aAAaH,EAAK,EAAG,GACtBF,EAAchC,QAAQsC,aAGzBC,EAAc,uCAAG,oDAAArE,EAAA,6DACfsE,EAAc,GAChBC,EAAiB,KAFA,SAGKC,cAAYC,KAAKb,GAHtB,OAGfc,EAHe,OAMZC,EAAI,EANQ,YAMLA,GAAKpE,EAAIqE,UANJ,iCAOArE,EAAIe,QAAQqD,GAPZ,cAObnD,EAPa,OAUbC,EAAQ,IAAMD,EAAKE,KAAK,GACxBC,EAAWH,EAAKI,YAAY,CAAEH,UAE9BI,EAAUgC,EAAW/B,QAAQC,WAAW,MAC9C8B,EAAW/B,QAAQE,OAASL,EAASK,OACrC6B,EAAW/B,QAAQG,MAAQN,EAASM,MAE9BE,EAAgB,CACpBC,cAAeP,EACfF,YAnBiB,UAqBbH,EAAKa,OAAOF,GAAe/B,QArBd,QAwBbyE,EAAehD,EAAQiD,aAAa9D,EAAQC,EAAQuC,EAAOxC,EAAQyC,EAAOxC,GAC1E8D,EAAchB,EAAgBc,EAAcrB,EAAOxC,EAAQyC,EAAOxC,GAGjD,OAAnBsD,EAEFA,EAAiBQ,EAGbR,IAAmBQ,IACrBR,EAAiBQ,EAEjBT,EAAYU,KAAKL,EAAI,IApCN,QAMcA,IANd,8BAwCrBL,EAAYU,KAAKzE,EAAIqE,SAAW,GAxCX,oBA4CEJ,cAAYS,SA5Cd,eA4CbC,EA5Ca,iBA6COA,EAAOC,UAAUT,EAAaJ,GA7CrC,sBA8CPc,SAAQ,SAAA5D,GAAI,OAAI0D,EAAOG,QAAQ7D,MA9CxB,UAiDC0D,EAAOI,OAjDR,QAiDbC,EAjDa,OAkDnB5G,EAAS6G,IAAIC,gBAAgB,IAAIC,KAAK,CAACH,EAAMI,QAAS,CAAErH,KAAM,sBAlD3C,mDAoDnBO,EAAa,uEApDM,2DAAH,qDAiEpB,OAPAwC,qBAAU,WACHX,IACHC,GAAY,GACZ0D,QAKF,6BACE,4BACE/B,IAAKuB,EACL3F,UAAU,kBAEZ,4BACEoE,IAAKwB,EACL5F,UAAU,qBAiBlByF,EAAqBxF,aAAe,GAErBwF,QCxHTiC,EAAiB,SAAAvH,GACrB,OACE,yBAAKH,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE0F,UAAWvF,EAAMuF,UACjBrD,IAAKlC,EAAMkC,IACX5B,SAAUN,EAAMM,SAChBE,aAAcR,EAAMQ,aACpBmC,OAAQ3C,EAAM2C,OACdC,OAAQ5C,EAAM4C,OACduC,KAAMnF,EAAMmF,KACZC,KAAMpF,EAAMoF,OAEd,uBAAGvF,UAAU,aAAb,mDAgBN0H,EAAezH,aAAe,GAEfyH,QC9CTC,EAAe,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5B,OACE,yBAAK7H,UAAU,iBACb,yBACEA,UAAU,aACV8H,IAAI,6EACJ/D,MAAM,MACND,OAAO,QAET,uBAAG9D,UAAU,aAAb,2CACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAQM,KAAK,uBAAuBD,QAASwH,IAC7C,uBAAGE,KAAMH,EAAM5H,UAAU,gBAAgBgI,UAAQ,GAC/C,kBAAC,EAAD,CAAQ1H,KAAK,WAAWF,KAAK,gBAYvCuH,EAAa1H,aAAe,GAEb0H,QCjCTM,EAAQ,WAAM,MAGoB1F,mBAAS,GAH7B,mBAGX2F,EAHW,KAGEC,EAHF,OAMc5F,mBAAS,IANvB,mBAMX6F,EANW,KAMDC,EANC,OASkC9F,mBAAS,IAT3C,mBASX+F,EATW,KASSC,EATT,OAYsBhG,mBAAS,IAZ/B,mBAYXiG,EAZW,KAYGC,EAZH,OAeoBlG,mBAAS,CAAEO,QAAS,EAAGC,QAAS,EAAGuC,MAAO,EAAGC,MAAO,IAfxE,mBAeXvC,EAfW,KAeEC,EAfF,OAkBwBV,mBAAS,IAlBjC,mBAkBXmG,EAlBW,KAkBIC,EAlBJ,KA4EZhI,EAAe,SAAAiI,GACnBP,EAAYO,GACZT,EAAe,IAUXU,EAAQ,CACZ,kBAAC,EAAD,CAAWC,IAAI,IAAItI,MAAO4H,EAAU3H,SAAU,kBAAM0H,EAAe,MACnE,kBAAC,EAAD,CAAgBW,IAAI,IAAIrI,SA9DL,SAAAS,GACnBqH,EAAsBrH,GACtBiH,EAAeD,EAAc,IA4DmBvH,aAAcA,IAC9D,kBAAC,EAAD,CAAamI,IAAI,IAAI5H,KAAMoH,EAAoB3H,aAAcA,EAAcF,SAnD1D,SAAAS,GACjBuH,EAAgBvH,GAChBiH,EAAeD,EAAc,MAkD7B,kBAAC,EAAD,CAAgBY,IAAI,IAAIzG,IAAKmG,EAAc/H,SAtCtB,SAACqC,EAAQC,EAAQuC,EAAMC,GAC5CtC,EAAe,CAAEH,SAAQC,SAAQuC,OAAMC,SACvC4C,EAAeD,EAAc,MAqC7B,kBAAC,EAAD,CACEY,IAAI,IACJpD,UAAW4C,EACXjG,IAAKmG,EACL/H,SAhCkB,SAAAS,GACpByH,EAAiBzH,GACjBiH,EAAeD,EAAc,IA+B3BvH,aAAcA,EACdmC,OAAQE,EAAYF,OACpBC,OAAQC,EAAYD,OACpBuC,KAAMtC,EAAYsC,KAClBC,KAAMvC,EAAYuC,OAEpB,kBAAC,EAAD,CAAcuD,IAAI,IAAIlB,KAAMc,EAAeb,SAAU,kBAAMM,EAAe,OAG5E,OACE,6BACGU,EAAMX,KAMbD,EAAMhI,aAAe,GAENgI,QC1HA,G,OAAA,WACb,OACE,yBAAKjI,UAAU,UAAf,WACU,uBAAG+H,KAAK,8BAAR,WADV,oC,OCIJ/F,IAAM+G,oBAAoBC,UAA1B,kDAAiFhH,IAAMiH,QAAvF,kBAYeC,MAVf,WACE,OACE,yBAAKlJ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcmJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASrF,OACP,kBAAC,IAAMsF,WAAP,KACE,kBAAC,EAAD,OAEF5I,SAAS6I,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdC,OAAM,SAAAxJ,GACLyJ,QAAQzJ,MAAMA,EAAMoI,a","file":"static/js/main.2f8dbe91.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/components/Header.css'\r\n\r\nconst Header = () => (\r\n  <div>\r\n    <h1 className='logo-name'>Ok Beamer</h1>\r\n  </div>\r\n)\r\n\r\nHeader.propTypes = {}\r\nHeader.defaultProps = {}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/components/Button.css'\r\n\r\nconst Button = props => {\r\n  return (\r\n    <div className={`button button-${props.type}`} onClick={props.onClick}>\r\n      {props.text}\r\n    </div>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nButton.defaultProps = {\r\n  type: 'default'\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport Button from '../components/Button'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is responsible for displaying errors. It will always redirect to\r\n * the first non-error view.\r\n *\r\n * @param {Object} props - error stores the error message, and nextView is the\r\n * function to switch to the next view\r\n */\r\nconst ErrorView = ({ error, nextView }) => {\r\n  return (\r\n    <div className='centered-view'>\r\n      <p className='view-text'>{error} Do you want to try again?</p>\r\n      <Button text='Try again' onClick={nextView} />\r\n    </div>\r\n  )\r\n}\r\n\r\nErrorView.propTypes = {\r\n  error: PropTypes.string.isRequired,\r\n  nextView: PropTypes.func.isRequired\r\n}\r\n\r\nErrorView.defaultProps = {}\r\n\r\nexport default ErrorView\r\n","/* eslint-env browser */\r\nimport React from 'react'\r\nimport Button from '../components/Button'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is the home view of the application. It is responsible for the\r\n * input of the PDF file. After a correct PDF file is inserted, it is sent to\r\n * the parent.\r\n *\r\n * THIS VIEW ISN'T RESPONSIBLE FOR THE CONVERSION, BUT LoadPDFView IS\r\n *\r\n * @param {func} nextView - Prop that indicates to the parent that the new view\r\n * can be displayed and an error handler\r\n */\r\nconst ChooseFileView = ({ nextView, errorHandler }) => {\r\n  /**\r\n   * Creates a file picker\r\n   * When the user picks a file, it will move to the next view with this file\r\n   */\r\n  const filePicker = () => {\r\n    var input = document.createElement('input')\r\n    input.type = 'file'\r\n    input.accept = 'application/pdf'\r\n\r\n    input.onchange = e => {\r\n      const file = e.target.files[0]\r\n      input.remove()\r\n\r\n      // Read the file as base64\r\n      const reader = new FileReader()\r\n      reader.readAsDataURL(file)\r\n      reader.onload = () => nextView(reader.result)\r\n      reader.onerror = () => errorHandler('Unable to convert the given file 😕.')\r\n    }\r\n\r\n    input.click()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>What is this?</h2>\r\n      <p className='description-text'>\r\n        <b>OkBeamer</b> is a tool made to remove transitions from PDFs created\r\n        with Beamer or any other software. Doing this will not only create a\r\n        smaller file, but an actually printable one.\r\n      </p>\r\n      <h2>How does it work?</h2>\r\n      <p className='description-text'>\r\n        First you upload the file with the button below 👇. After that, you'll\r\n        be asked to draw a rectangle over the area that indicates change. This\r\n        is usually either the title or the page number. And... <i>Voilà</i>\r\n      </p>\r\n      <div className='centered-view'>\r\n        <p className='view-text'>Ready?!</p>\r\n        <Button text='Choose File' type='success' onClick={filePicker} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nChooseFileView.propTypes = {\r\n  nextView: PropTypes.func.isRequired,\r\n  errorHandler: PropTypes.func.isRequired\r\n}\r\n\r\nChooseFileView.defaultProps = {}\r\n\r\nexport default ChooseFileView\r\n","import React from 'react'\r\nimport '../styles/components/Spinner.css'\r\n\r\n// Spinner animation credit: https://github.com/lukehaas/css-loaders\r\n\r\nexport default () => {\r\n  return (\r\n    <div className='loader' />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport pdfjs from 'pdfjs-dist'\r\nimport Spinner from '../components/Spinner'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is responsible for converting the file received in ChooseFileView\r\n * to a PDFjs variable.\r\n *\r\n * @param {Object} props - File to be interpreted and the next view function,\r\n * which receives the converted PDF file.\r\n */\r\nconst LoadPDFView = ({ file, nextView, errorHandler }) => {\r\n  /**\r\n   * Loads the file into a PDFJS variable and returns it to the parent.\r\n   *\r\n   * @param {string} file - File name of the file to be loaded\r\n   */\r\n  const loadFile = async file => {\r\n    const loadingTask = pdfjs.getDocument(file)\r\n\r\n    try {\r\n      nextView(await loadingTask.promise)\r\n    } catch (e) {\r\n      errorHandler('Oh no, seems like that PDF file isn\\'t valid 😶')\r\n    }\r\n  }\r\n\r\n  loadFile(file)\r\n  return (\r\n    <div className='centered-view'>\r\n      <Spinner />\r\n      <p className='view-text'>Loading your PDF</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nLoadPDFView.propTypes = {\r\n  file: PropTypes.string.isRequired,\r\n  nextView: PropTypes.func.isRequired,\r\n  errorHandler: PropTypes.func.isRequired\r\n}\r\n\r\nLoadPDFView.defaultProps = {}\r\n\r\nexport default LoadPDFView\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/components/DrawableCanvas.css'\r\n\r\n/**\r\n * The DrawableCanvas component is responsible for rendering an interactive\r\n * canvas. The user can create a region which dictates what part of the PDF\r\n * indicates a change.\r\n *\r\n * Props (all mandatory):\r\n *   - pdf: Refers to the loaded pdf file that is going to be displayed\r\n *   - sendCoords: It's function given by the parent that receives the\r\n *                 selection made by the user\r\n *\r\n * @param {object} props Canvas props (listed above)\r\n */\r\nconst DrawableCanvas = ({ pdf, sendCoords }) => {\r\n  // #region States and refs\r\n  // Avoid rerenders of the canvas\r\n  const [rendered, setRendered] = useState(false)\r\n\r\n  // The variables below are used to render the page to the canvas\r\n  const canvas = useRef(null)\r\n  const renderedPage = useRef(null)\r\n  const renderedContext = useRef(null)\r\n\r\n  // Coordinates state\r\n  const [coordinates, setCoordinates] = useState({\r\n    startX: -1,\r\n    startY: -1\r\n  })\r\n\r\n  // Stores if the mouse is being pressed\r\n  const mouseIsDown = useRef(false)\r\n  // #endregion States and refs\r\n\r\n  /**\r\n   * After the component is mounted, render the canvas\r\n   * This canvas render will only happen once, with the help of the rendered\r\n   * state\r\n   */\r\n  useEffect(() => {\r\n    // Won't rerender the canvas if it was already rendered\r\n    if (!rendered) {\r\n      // Render the first page in the PDF\r\n      pdf.getPage(1).then(page => {\r\n        // Adjust the scale, make sure the canvas always has a width of 700px\r\n        // page.view[2] is the width of the page\r\n        const scale = 700 / page.view[2]\r\n        const viewport = page.getViewport({ scale })\r\n\r\n        const context = canvas.current.getContext('2d')\r\n        canvas.current.height = viewport.height\r\n        canvas.current.width = viewport.width\r\n        context.fillStyle = 'rgba(0, 102, 204)'\r\n\r\n        const renderContext = {\r\n          canvasContext: context,\r\n          viewport\r\n        }\r\n        page.render(renderContext)\r\n\r\n        // Persist the required variables for rerenders\r\n        renderedPage.current = page\r\n        renderedContext.current = renderContext\r\n        setRendered(true)\r\n      })\r\n    }\r\n  })\r\n\r\n  /**\r\n   * Rerenders the page in the canvas\r\n   */\r\n  const rerenderPage = () => {\r\n    renderedPage.current.render(renderedContext.current)\r\n  }\r\n\r\n  /**\r\n   * Handles the mouse down event. This means that the user wants to draw a\r\n   * rectangle.\r\n   *\r\n   * @param {Object} param0 Target, in this case it's used to get the mouse\r\n   * coordinates\r\n   */\r\n  const handleMouseDown = ({ clientX, clientY }) => {\r\n    // Remove the previous rectangle by rerendering the page\r\n    rerenderPage()\r\n\r\n    // Get the canvas boundaries in order to get the correct mouse position\r\n    const rect = canvas.current.getBoundingClientRect()\r\n\r\n    // Start the rectangle drawing process\r\n    mouseIsDown.current = true\r\n    setCoordinates(coords => ({\r\n      startX: clientX - rect.left,\r\n      startY: clientY - rect.top\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Handles the mouse up event. This means that the user has finished drawing a\r\n   * rectangle.\r\n   *\r\n   * @param {Object} param0 Target, in this case it's used to get the mouse\r\n   * coordinates\r\n   */\r\n  const handleMouseUp = ({ clientX, clientY }) => {\r\n    // Stop drawing\r\n    mouseIsDown.current = false\r\n\r\n    // Get the canvas boundaries in order to get the correct mouse position\r\n    const rect = canvas.current.getBoundingClientRect()\r\n\r\n    // Send the coordinates to the parent\r\n    sendCoords(\r\n      coordinates.startX,\r\n      coordinates.startY,\r\n      clientX - rect.left,\r\n      clientY - rect.top\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Draws the rectangle while the user moves it's cursor. It's a bit janky but\r\n   * it allows a rectangle to be drawn.\r\n   *\r\n   * @param {Object} param0 Target, in this case it's used to get the mouse\r\n   * coordinates\r\n   */\r\n  const handleMovement = ({ nativeEvent }) => {\r\n    if (canvas.current != null && mouseIsDown.current) {\r\n      const rect = canvas.current.getBoundingClientRect()\r\n      const context = canvas.current.getContext('2d')\r\n\r\n      // Draw the rectangle\r\n      context.beginPath()\r\n      context.fillRect(\r\n        coordinates.startX,\r\n        coordinates.startY,\r\n        nativeEvent.x - rect.left - coordinates.startX,\r\n        nativeEvent.y - rect.top - coordinates.startY\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvas}\r\n      id='drawable-canvas'\r\n      onMouseDown={handleMouseDown}\r\n      onMouseUp={handleMouseUp}\r\n      onMouseMove={handleMovement}\r\n    />\r\n  )\r\n}\r\n\r\nDrawableCanvas.propTypes = {\r\n  pdf: PropTypes.object.isRequired,\r\n  sendCoords: PropTypes.func.isRequired\r\n}\r\n\r\nDrawableCanvas.defaultProps = {}\r\n\r\nexport default DrawableCanvas\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from '../components/Button'\r\nimport DrawableCanvas from '../components/DrawableCanvas'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is responsible for receiving which area represents a transition\r\n * (for example, the page of the number or a title).\r\n *\r\n * Props (all mandatory):\r\n *   - pdf: Refers to the loaded pdf file that is going to be used\r\n *   - nextView: Receives the chosen coordinates and moves to the next view\r\n *\r\n * @param {object} props Props described above\r\n */\r\nconst ChooseZoneView = ({ pdf, nextView }) => {\r\n  const [coords, setCoords] = useState({\r\n    startX: -1,\r\n    startY: -1,\r\n    endX: -1,\r\n    endY: -1\r\n  })\r\n\r\n  /**\r\n   * Receives the coordinates of the area that indicates a change of page.\r\n   * This function is passed as a prop to the drawable canvas\r\n   *\r\n   * @param {number} startX Start position of the changing area (X coordinate)\r\n   * @param {number} startY Start position of the changing area (Y coordinate)\r\n   * @param {number} endX End position of the changing area (X coordinate)\r\n   * @param {number} endY End position of the changing area (Y coordinate)\r\n   */\r\n  const receiveCoords = (startX, startY, endX, endY) => {\r\n    setCoords({\r\n      startX,\r\n      startY,\r\n      endX,\r\n      endY\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Changes to the next view\r\n   */\r\n  const changeView = () => {\r\n    if (coords.startX !== -1) {\r\n      nextView(coords.startX, coords.startY, coords.endX, coords.endY)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='centered-view'>\r\n      <p className='view-text'>Draw a rectangle over the part of the document indicates a change. This could be something like the title or the page number.</p>\r\n      <DrawableCanvas pdf={pdf} sendCoords={receiveCoords} />\r\n      <Button\r\n        type={coords.startX === -1 ? 'unavailable' : 'default'}\r\n        text='Convert'\r\n        onClick={changeView}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nChooseZoneView.propTypes = {\r\n  pdf: PropTypes.object.isRequired,\r\n  nextView: PropTypes.func.isRequired\r\n}\r\n\r\nChooseZoneView.defaultProps = {}\r\n\r\nexport default ChooseZoneView\r\n","/* eslint-env browser */\r\nimport React, { useRef, useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { PDFDocument } from 'pdf-lib'\r\nimport '../styles/components/FindRepeatedPages.css'\r\n\r\n/**\r\n * EditPDFController\r\n *\r\n * What does this do?\r\n * This component is responsible for looping over every page in the given PDF\r\n * file and find every page in which the selected region changes. After that it\r\n * will create a file with only the important pages.\r\n *\r\n * Why is it a component?\r\n * Although this code revolves mostly around comparing images in JS, it needs to\r\n * use two canvas, hence the need to instantiate a react component.\r\n *\r\n * How does it work?\r\n * Two hidden canvas will be drawn, the first one renders the document's page in\r\n * it's entirety, the second renders only the changing section. Then, a base64\r\n * image of the second canvas will be stored and used for future reference in\r\n * the next page.\r\n *\r\n * Props (all mandatory):\r\n *   - pdfBase64: Refers to the base64 of the pdf file that is going to be\r\n *                edited\r\n *   - pdf: Refers to the loaded pdf file that is going to be rendered\r\n *   - nextView: Moves to the nextView with the newly created file\r\n *   - errorHandler: Function used to indicate to the user that an error\r\n *                   occurred\r\n *   - startX: startX: Start position of the changing area (X coordinate)\r\n *   - startY: Start position of the changing area (Y coordinate)\r\n *   - endX: End position of the changing area (X coordinate)\r\n *   - endY: End position of the changing area (Y coordinate)\r\n *   - nextView: Function that indicates that the PDF was completed (TODO define\r\n *               the arguments)\r\n *\r\n * @param {Object} props - Props described above\r\n */\r\n\r\nconst ArrangePDFController = ({ pdfBase64, pdf, nextView, errorHandler, startX, startY, endX, endY }) => {\r\n  // Avoid componentWillUnmount evocation\r\n  const [rendered, setRendered] = useState(false)\r\n\r\n  const fullCanvas = useRef(null)\r\n  const sectionCanvas = useRef(null)\r\n\r\n  const convertToBase64 = (img, width, height) => {\r\n    const context = sectionCanvas.current.getContext('2d')\r\n    sectionCanvas.current.width = Math.abs(width)\r\n    sectionCanvas.current.height = Math.abs(height)\r\n    context.putImageData(img, 0, 0)\r\n    return sectionCanvas.current.toDataURL()\r\n  }\r\n\r\n  const findExtraPages = async () => {\r\n    const pagesToKeep = []\r\n    let currentSection = null // Stores the section's base64\r\n    const originalDoc = await PDFDocument.load(pdfBase64)\r\n\r\n    // Iterate over all the pages\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i)\r\n\r\n      // Render the page to the full canvas\r\n      const scale = 700 / page.view[2]\r\n      const viewport = page.getViewport({ scale })\r\n\r\n      const context = fullCanvas.current.getContext('2d')\r\n      fullCanvas.current.height = viewport.height\r\n      fullCanvas.current.width = viewport.width\r\n\r\n      const renderContext = {\r\n        canvasContext: context,\r\n        viewport\r\n      }\r\n      await page.render(renderContext).promise\r\n\r\n      // Create an image of the section and convert it to base64\r\n      const sectionImage = context.getImageData(startX, startY, endX - startX, endY - startY)\r\n      const base64Image = convertToBase64(sectionImage, endX - startX, endY - startY)\r\n\r\n      // Check if the page has changed, if so, delete the previous ones\r\n      if (currentSection === null) {\r\n        // It's the first page, do no check\r\n        currentSection = base64Image\r\n      } else {\r\n        // The page changed\r\n        if (currentSection !== base64Image) {\r\n          currentSection = base64Image\r\n          // Keeps the page before (-1) and subtracts one since pdf-lib starts at 0\r\n          pagesToKeep.push(i - 2)\r\n        }\r\n      }\r\n    }\r\n    pagesToKeep.push(pdf.numPages - 1)\r\n\r\n    try {\r\n      // Create a new document and copy the pages\r\n      const newDoc = await PDFDocument.create()\r\n      const copiedPages = await newDoc.copyPages(originalDoc, pagesToKeep)\r\n      copiedPages.forEach(page => newDoc.addPage(page))\r\n\r\n      // Save the document as a blob and move to the next view\r\n      const bytes = await newDoc.save()\r\n      nextView(URL.createObjectURL(new Blob([bytes.buffer], { type: 'application/pdf' })))\r\n    } catch (e) {\r\n      errorHandler('Something happened while trying to create the new file 😥')\r\n    }\r\n  }\r\n\r\n  // This is used since there needs to be a guarantee that fullCanvas and\r\n  // sectionCanvas have been defined (equivalent to componentDidMount)\r\n  useEffect(() => {\r\n    if (!rendered) {\r\n      setRendered(true)\r\n      findExtraPages()\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        ref={fullCanvas}\r\n        className='hidden-canvas'\r\n      />\r\n      <canvas\r\n        ref={sectionCanvas}\r\n        className='hidden-canvas'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nArrangePDFController.propTypes = {\r\n  pdfBase64: PropTypes.string.isRequired,\r\n  pdf: PropTypes.object.isRequired,\r\n  nextView: PropTypes.func.isRequired,\r\n  errorHandler: PropTypes.func.isRequired,\r\n  startX: PropTypes.number.isRequired,\r\n  startY: PropTypes.number.isRequired,\r\n  endX: PropTypes.number.isRequired,\r\n  endY: PropTypes.number.isRequired\r\n}\r\n\r\nArrangePDFController.defaultProps = {}\r\n\r\nexport default ArrangePDFController\r\n","import React from 'react'\r\nimport Spinner from '../components/Spinner'\r\nimport ArrangePDFController from '../components/ArrangePDFController'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is responsible for finding which pages are transitions and removing\r\n * them from the file.\r\n *\r\n * Most of the logic in this view is stored in ArrangePDFController\r\n *\r\n * Props (all mandatory):\r\n *   - pdfBase64: Refers to the base64 of the pdf file that is going to be\r\n *                edited\r\n *   - pdf: Refers to the loaded pdf file that is going to be rendered\r\n *   - nextView: Moves to the nextView with the newly created file\r\n *   - errorHandler: Function used to indicate to the user that an error\r\n *                   occurred\r\n *   - startX: startX: Start position of the changing area (X coordinate)\r\n *   - startY: Start position of the changing area (Y coordinate)\r\n *   - endX: End position of the changing area (X coordinate)\r\n *   - endY: End position of the changing area (Y coordinate)\r\n *   - nextView: Function that indicates that the PDF was completed (TODO define\r\n *               the arguments)\r\n *\r\n * @param {Object} props - Props described above\r\n */\r\nconst ArrangePDFView = props => {\r\n  return (\r\n    <div className='centered-view'>\r\n      <Spinner />\r\n      <ArrangePDFController\r\n        pdfBase64={props.pdfBase64}\r\n        pdf={props.pdf}\r\n        nextView={props.nextView}\r\n        errorHandler={props.errorHandler}\r\n        startX={props.startX}\r\n        startY={props.startY}\r\n        endX={props.endX}\r\n        endY={props.endY}\r\n      />\r\n      <p className='view-text'>Removing those pesky transitions. Hold tight!</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nArrangePDFView.propTypes = {\r\n  pdfBase64: PropTypes.string.isRequired,\r\n  pdf: PropTypes.object.isRequired,\r\n  nextView: PropTypes.func.isRequired,\r\n  errorHandler: PropTypes.func.isRequired,\r\n  startX: PropTypes.number.isRequired,\r\n  startY: PropTypes.number.isRequired,\r\n  endX: PropTypes.number.isRequired,\r\n  endY: PropTypes.number.isRequired\r\n}\r\n\r\nArrangePDFView.defaultProps = {}\r\n\r\nexport default ArrangePDFView\r\n","import React from 'react'\r\nimport Button from '../components/Button'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/views/Views.css'\r\n\r\n/**\r\n * This view is responsible for displaying a download link to the finalized\r\n * file\r\n *\r\n * Props:\r\n *    - blob: Blob url to the completed file\r\n *    - homeView: Function that redirects to the home view\r\n * @param {Object} props Described above\r\n */\r\nconst DownloadView = ({ blob, homeView }) => {\r\n  return (\r\n    <div className='centered-view'>\r\n      <img\r\n        className='hooray-gif'\r\n        src='https://media1.tenor.com/images/3284a8be1baf3f415f175e0ebc4fb399/tenor.gif'\r\n        width='369'\r\n        height='281'\r\n      />\r\n      <p className='view-text'>Finished 🎉 Here's your file:</p>\r\n      <div className='buttons'>\r\n        <Button text='Convert another file' onClick={homeView} />\r\n        <a href={blob} className='download-link' download>\r\n          <Button text='Download' type='success' />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDownloadView.propTypes = {\r\n  blob: PropTypes.string.isRequired,\r\n  homeView: PropTypes.func.isRequired\r\n}\r\n\r\nDownloadView.defaultProps = {}\r\n\r\nexport default DownloadView\r\n","import React, { useState } from 'react'\r\nimport ErrorView from './views/ErrorView.js'\r\nimport ChooseFileView from './views/ChooseFileView.js'\r\nimport LoadPDFView from './views/LoadPDFView.js'\r\nimport ChooseZoneView from './views/ChooseZoneView.js'\r\nimport ArrangePDFView from './views/ArrangePDFView.js'\r\nimport DownloadView from './views/DownloadView.js'\r\n\r\nconst Views = () => {\r\n  // #region State\r\n  // This state stores the views available\r\n  const [currentView, setCurrentView] = useState(1)\r\n\r\n  // This state stores the current error message\r\n  const [errorMsg, setErrorMsg] = useState('')\r\n\r\n  // This state stores the uploaded file as base64\r\n  const [receivedFileBase64, setReceivedFileBase64] = useState('')\r\n\r\n  // This state stores the uploaded file as a PDFJS variable\r\n  const [receivedFile, setReceivedFile] = useState({})\r\n\r\n  // This state stores the coordinates of the changing area\r\n  const [coordinates, setCoordinates] = useState({ startX: -1, startY: -1, endX: -1, endY: -1 })\r\n\r\n  // This state stores the completed file as a blob url\r\n  const [completedFile, setCompletedFile] = useState('')\r\n  // #endregion State\r\n\r\n  // #region View specific functions\r\n  /**\r\n   * Receives the picked file blob, stores it, and moves to the next view\r\n   * Corresponds to the nextView of ChooseFilePicker\r\n   *\r\n   * @param {Object} file - The file's blob\r\n   */\r\n  const fileReceived = file => {\r\n    setReceivedFileBase64(file)\r\n    setCurrentView(currentView + 1)\r\n  }\r\n\r\n  /**\r\n   * Receives the PDFJS generated variable, stores it, and moves to the next\r\n   * view\r\n   * Corresponds to the nextView of LoadPDFView\r\n   *\r\n   * @param {Object} file - The PDFJS file\r\n   */\r\n  const fileLoaded = file => {\r\n    setReceivedFile(file)\r\n    setCurrentView(currentView + 1)\r\n  }\r\n\r\n  /**\r\n   * Receives the coordinates chosen by the user, and moves to the next view\r\n   * Corresponds to the nextView of ChooseZoneView\r\n   *\r\n   * @param {number} startX Start position of the changing area (X coordinate)\r\n   * @param {number} startY Start position of the changing area (Y coordinate)\r\n   * @param {number} endX End position of the changing area (X coordinate)\r\n   * @param {number} endY End position of the changing area (Y coordinate)\r\n   */\r\n  const coordinatesSet = (startX, startY, endX, endY) => {\r\n    setCoordinates({ startX, startY, endX, endY })\r\n    setCurrentView(currentView + 1)\r\n  }\r\n\r\n  /**\r\n   * Receives the newly created file blob\r\n   * Corresponds to the nextView of ArrangePDFView\r\n   *\r\n   * @param {Object} file - The file blob\r\n   */\r\n  const fileCompleted = file => {\r\n    setCompletedFile(file)\r\n    setCurrentView(currentView + 1)\r\n  }\r\n  // #endregion View specific functions\r\n\r\n  /**\r\n   * Receives an error message and switches to the ErrorView\r\n   *\r\n   * @param {string} message - Error Message to display to the user\r\n   */\r\n  const errorHandler = message => {\r\n    setErrorMsg(message)\r\n    setCurrentView(0)\r\n  }\r\n\r\n  // Views to be displayed\r\n  // 0: Error view\r\n  // 1: Choose file view\r\n  // 2: Load PDF view\r\n  // 3: Choose zone view\r\n  // 4: Converting view\r\n  // 5: Download view\r\n  const views = [\r\n    <ErrorView key='0' error={errorMsg} nextView={() => setCurrentView(1)} />,\r\n    <ChooseFileView key='1' nextView={fileReceived} errorHandler={errorHandler} />,\r\n    <LoadPDFView key='2' file={receivedFileBase64} errorHandler={errorHandler} nextView={fileLoaded} />,\r\n    <ChooseZoneView key='3' pdf={receivedFile} nextView={coordinatesSet} />,\r\n    <ArrangePDFView\r\n      key='4'\r\n      pdfBase64={receivedFileBase64}\r\n      pdf={receivedFile}\r\n      nextView={fileCompleted}\r\n      errorHandler={errorHandler}\r\n      startX={coordinates.startX}\r\n      startY={coordinates.startY}\r\n      endX={coordinates.endX}\r\n      endY={coordinates.endY}\r\n    />,\r\n    <DownloadView key='5' blob={completedFile} homeView={() => setCurrentView(1)} />\r\n  ]\r\n\r\n  return (\r\n    <div>\r\n      {views[currentView]}\r\n    </div>\r\n  )\r\n}\r\n\r\nViews.propTypes = {}\r\nViews.defaultProps = {}\r\n\r\nexport default Views\r\n","import React from 'react'\r\nimport '../styles/components/Footer.css'\r\n\r\nexport default () => {\r\n  return (\r\n    <div className='footer'>\r\n      Made by <a href='https://github.com/LiTO773'>LiTO773</a> • Check it out on\r\n      Github\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport Header from './components/Header.js'\nimport Views from './Views.js'\nimport Footer from './components/Footer.js'\nimport './styles/App.css'\n\n// Setup PDFJS worker\n// Source: https://github.com/wojtekmaj/react-pdf#standard-browserify-and-others\nimport pdfjs from 'pdfjs-dist'\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`\n\nfunction App () {\n  return (\n    <div className='app'>\n      <Header />\n      <Views />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-env browser */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}